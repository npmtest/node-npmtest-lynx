{"/home/travis/build/npmtest/node-npmtest-lynx/test.js":"/* istanbul instrument in package npmtest_lynx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lynx/lib.npmtest_lynx.js":"/* istanbul instrument in package npmtest_lynx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lynx = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lynx = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lynx/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lynx && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lynx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lynx\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lynx.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_lynx.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lynx.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_lynx.__dirname +\n                    '/lib.npmtest_lynx.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lynx/node_modules/lynx/lib/lynx.js":"var dgram    = require('dgram')\n  , Stream   = require('stream').Stream\n  , util     = require('util')\n  , parser   = require('statsd-parser')\n  //\n  // `Math.random` doesn't cut it, based on tests from sampling.js\n  // Variations are wild for large data sets\n  //\n  , mersenne = require('mersenne')\n  , mt       = new mersenne.MersenneTwister19937()\n  , noop     = function noop() {}\n  ;\n\nfunction makeError(opts) {\n  var error = new Error(opts.message);\n  error.f = opts.f;\n  error.args = opts.args;\n  return error;\n}\n\n//\n// Max idle time for a ephemeral socket\n//\nvar EPHEMERAL_LIFETIME_MS = 1000;\n\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ constructors ~~\n//\n\n//\n// ### constructor Lynx(host, port, socket)\n// #### @host    {String} Server host name\n// #### @port    {Number} Server port\n// #### @options {Object} Aditional options\n// #### @options.socket   {Object} Optional socket if we want to share\n// #### @options.on_error {Function} A function to execute on errors\n// #### @options.scope    {String} define the a prefix for all stats, \n//      e.g. with `scope` 'product1' and stat 'somestat' the key would \n//      actually be 'product1.somestat'.\n//\n// var client = new lynx('localhost', 8125);\n//\n// Returns a new `Lynx` client\n//\nfunction Lynx(host, port, options) {\n  if (!(this instanceof Lynx)) {\n    return new Lynx(host, port, options);\n  }\n  \n  var self = this;\n\n  //\n  // Server hostname and port\n  //\n  this.host = host || '127.0.0.1';\n  this.port = port || 8125;\n\n  //\n  // Optional shared socket\n  //\n  this.socket = options && options.socket;\n\n  //\n  // Handle prefix\n  //\n  this.scope = options && options.scope || options && options.prefix || '';\n\n  //\n  // groups in graphite are delimited by `.` so we need to make sure our\n  // scope ends with `.`. If it doesn't we just add it (unless we have no\n  // scope defined).\n  //\n  if(typeof this.scope === 'string' && this.scope !== '' &&\n     !/\\.$/.test(this.scope)) {\n    this.scope += '.';\n  }\n\n  //\n  // When a *shared* socked isn't provided, an ephemeral\n  // socket is demand allocated.  This ephemeral socket is closed\n  // after being idle for EPHEMERAL_LIFETIME_MS.\n  //\n  this.ephemeral_socket = undefined;\n  this.last_used_timer  = undefined;\n\n  //\n  // Set out error handling code\n  //\n  this.on_error = options && typeof options.on_error === 'function'\n               ? options.on_error\n               : this._default_error_handler\n               ; \n\n  //\n  // Stream properties\n  //\n  this.readable = true;\n  this.writable = true;\n\n  this.parser = parser.createStream();\n\n  this.parser.on('error', this.on_error);\n\n  this.parser.on('stat', function (text, stat_obj) {\n    var stat = {};\n\n    //\n    // Construct a statsd value|type pair\n    //\n    stat[stat_obj.stat] = stat_obj.value + '|' + stat_obj.type;\n\n    //\n    // Add sample rate if one exists\n    //\n    if(stat_obj.sample_rate) {\n      stat[stat_obj.stat] += '@' + stat_obj.sample_rate;\n      self.send(stat, parseFloat(stat_obj.sample_rate));\n    }\n    else {\n      self.send(stat);\n    }\n  });\n}\n\nutil.inherits(Lynx, Stream);\n\n//\n// ### constructor Timer(stat, sample_rate)\n// #### @stat        {String} Stat key, in `foo:1|ms` would be foo\n// #### @sample_rate {Number} Determines the sampling rate, e.g. how many\n//      packets should be sent. If set to 0.1 it sends 1 in each 10.\n//\n// var client = new lynx('localhost', 8125);\n// var timer  = client.Timer('foo');\n//\n// //\n// // Sends something like: `foo:100|ms` via udp to the server\n// //\n// setTimeout(function {\n//   timer.stop();\n// }, 100);\n//\n// Returns a timer. When stopped, this transmits an interval\n//\nLynx.prototype.createTimer = function createTimer(stat, sample_rate) {\n  var self       = this\n    , start_time = new Date ().getTime()\n    , stopped    = false\n    , duration\n    , start_hrtime\n    ;\n\n  if (typeof process.hrtime === \"function\") {\n    var start_hrtime = process.hrtime();\n  }\n\n  //\n  // ### function stop()\n  //\n  // Stops the timer and issues the respective interval.\n  // Check example above\n  //\n  function stop() {\n    //\n    // If timer is already stopped just ignore the request\n    //\n    if(stopped) {\n      self.on_error(\n        makeError({ message : \"Can't stop a timer twice\"\n        , f       : 'stop'\n        }));\n      return;\n    }\n\n    //\n    // Calculate duration\n    //\n    if (start_hrtime) {\n      var stop_hrtime = process.hrtime()\n        , seconds     = stop_hrtime[0] - start_hrtime[0]\n        , nanos       = stop_hrtime[1] - start_hrtime[1]\n        ;\n      duration = seconds * 1000 + nanos / 1000000\n    } else {\n      duration = new Date ().getTime() - start_time;\n    }\n\n    //\n    // Emit\n    //\n    self.timing(stat, duration, sample_rate);\n\n    //\n    // So no one stops a timer twice (causing two emits)\n    //\n    stopped = true;\n  }\n\n  //\n  // The closure that is returned\n  //\n  return {\n      stat        : stat\n    , sample_rate : sample_rate\n    , start_time  : start_time\n    , stop        : stop\n  };\n};\n\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ api ~~\n//\n\n//\n// ### function increment(stats, sample_rate)\n// #### @stats       {String|Array} Stat key, in `foo:1|ms` would be foo\n//      Optionally an array of `stats`.\n// #### @sample_rate {Number} Determines the sampling rate, e.g. how many\n//      packets should be sent. If set to 0.1 it sends 1 in each 10.\n//\n// var client = new lynx('localhost', 8125);\n// client.increment('getho');\n// client.increment(['not', 'cool']);\n//\n// Incremenents the desired stat(s)\n//\nLynx.prototype.increment = function increment(stats, sample_rate) {\n  this.count(stats, 1, sample_rate);\n};\n\n//\n// ### function decrement(stats, sample_rate)\n// #### @stats       {String|Array} Stat key, in `foo:1|ms` would be foo\n//      Optionally an array of `stats`.\n// #### @sample_rate {Number} Determines the sampling rate, e.g. how many\n//      packets should be sent. If set to 0.1 it sends 1 in each 10.\n//\n// var client = new lynx('localhost', 8125);\n// client.decrement('hey.you');\n//\n// Decrements the desired stat(s)\n//\nLynx.prototype.decrement = function decrement(stats, sample_rate) {\n  this.count(stats, -1, sample_rate);\n};\n\n//\n// ### function count(stats, delta, sample_rate)\n// #### @stats       {String|Array} Stat key, in `foo:1|ms` would be foo\n//      Optionally an array of `stats`.\n// #### @delta       {Number} Amount to add (or remove) from given stat\n// #### @sample_rate {Number} Determines the sampling rate, e.g. how many\n//      packets should be sent. If set to 0.1 it sends 1 in each 10.\n//\n// var client = new lynx('localhost', 8125);\n// client.count('python.fun', -100);\n//\n// Sends counting information to statsd. Normally this is invoked via \n// `increment` or `decrement`\n//\nLynx.prototype.count = function count(stats, delta, sample_rate) {\n  //\n  // If we are given a string stat (key) then transform it into array\n  //\n  if (typeof stats === 'string') {\n    stats = [stats];\n  }\n\n  //\n  // By now stats must be an array\n  //\n  if(!Array.isArray(stats)) {\n    //\n    // Error: Can't set if its not even an array by now\n    //\n    this.on_error(\n      makeError({ message : \"Can't set if its not even an array by now\"\n      , f       : 'count'\n      , args    : arguments\n      }));\n    return;\n  }\n\n  //\n  // Delta is required and must exist or we will send crap to statsd\n  //\n  if (typeof delta!=='number' && typeof delta!=='string' || isNaN(delta)) {\n    //\n    // Error: Must be either a number or a string, we cant send other stuff\n    //\n    this.on_error(\n      makeError({ message : 'Must be either a number or a string'\n      , f       : 'count'\n      , args    : arguments\n      }));\n    return;\n  }\n\n  //\n  // Batch up all these stats to send\n  //\n  var batch = {};\n  for(var i in stats) {\n    batch[stats[i]] = delta + '|c';\n  }\n\n  //\n  // Send all these stats\n  //\n  this.send(batch, sample_rate);\n};\n\n//\n// ### function timing(stat, duration, sample_rate)\n// #### @stat        {String} Stat key, in `foo:1|ms` would be foo\n// #### @duration    {Number} Timing duration in ms.\n// #### @sample_rate {Number} Determines the sampling rate, e.g. how many\n//      packets should be sent. If set to 0.1 it sends 1 in each 10.\n//\n// var client = new lynx('localhost', 8125);\n// client.timing('foo.bar.time', 500);\n//\n// Sends timing information for a given stat.\n//\nLynx.prototype.timing = function timing(stat, duration, sample_rate) {\n  var stats   = {};\n  stats[stat] = duration + '|ms';\n  this.send(stats, sample_rate);\n};\n\n//\n// ### function set(stat, value, sample_rate)\n// #### @stat        {String} Stat key, in `foo:1|s` would be foo\n// #### @value       {Number} Value for this set\n// #### @sample_rate {Number} Determines the sampling rate, e.g. how many\n//      packets should be sent. If set to 0.1 it sends 1 in each 10.\n//\n// var client = new lynx('localhost', 8125);\n// client.set('set1.bar', 567);\n//\n// Set for a specific stat\n//\nLynx.prototype.set = function set(stat, value, sample_rate) {\n  var stats   = {};\n  stats[stat] = value + '|s';\n  this.send(stats, sample_rate);\n};\n\n//\n// ### function gauge(stat, value, sample_rate)\n// #### @stat        {String} Stat key, in `foo:1|g` would be foo\n// #### @value       {Number} Value for this set\n// #### @sample_rate {Number} Determines the sampling rate, e.g. how many\n//      packets should be sent. If set to 0.1 it sends 1 in each 10.\n//\n// var client = new lynx('localhost', 8125);\n// client.gauge('gauge1.bar', 567);\n//\n// Send a gauge to statsd\n//\nLynx.prototype.gauge = function gauge(stat, value, sample_rate) {\n  var stats   = {};\n  stats[stat] = value + '|g';\n  this.send(stats, sample_rate);\n};\n\n//\n// ### function send(stats, sample_rate)\n// #### @stats       {Object} A stats object\n// #### @sample_rate {Number} Determines the sampling rate, e.g. how many\n//      packets should be sent. If set to 0.1 it sends 1 in each 10.\n//\n// var lynx = require('lynx');\n// var client = new lynx('localhost', 8125);\n// client.send(\n//   { \"foo\" : \"1|c\"\n//   , \"bar\" : \"-1|c\"\n//   , \"baz\" : \"500|ms\"\n//   });\n//\n// Will sample this data for a given sample_rate. If a random generated\n// number matches that sample_rate then stats get returned and the sample\n// rate gets appended (\"|@0.5\" in this case). Else we get an empty object.\n//\nLynx.prototype.send = function send(stats, sample_rate) {\n  var self          = this\n    , sampled_stats = Lynx.sample(stats, sample_rate)\n    , all_stats     = Object.keys(sampled_stats)\n    //\n    // Data to be sent\n    //\n    , send_data\n    ;\n\n  //\n  // If this object is empty (enumerable properties)\n  //\n  if(all_stats.length === 0) {\n    //\n    // Error: Nothing to send\n    //\n    this.on_error(\n      makeError({ message : 'Nothing to send'\n      , f       : 'send'\n      , args    : arguments\n      }));\n    return;\n  }\n\n  //\n  // Construct our send request\n  // If we have multiple stats send them in the same udp package\n  // This is achieved by having newline separated stats.\n  //\n  send_data = all_stats.map(function construct_stat(stat) {\n    return self.scope + stat + ':' + sampled_stats[stat];\n  }).join('\\n');\n\n  //\n  // Encode our data to a buffer\n  //\n  var buffer = new Buffer(send_data, 'utf8')\n    , socket\n    ;\n\n  //\n  // Do we already have a socket object we can use?\n  //\n  if (this.socket === undefined) {\n    //\n    // Do we have an ephemeral socket we can use?\n    //\n    if (!this.ephemeral_socket) {\n      //\n      // Create one\n      //\n      this.ephemeral_socket = dgram.createSocket('udp4');\n\n      //\n      // Register on error: Failed sending the buffer\n      //\n      this.ephemeral_socket.on('error', function (err) {\n        err.reason  = err.message;\n        err.f       = 'send';\n        err.message = 'Failed sending the buffer';\n        err.args    = arguments;\n        self.on_error(err);\n        return;\n      });\n    }\n\n    socket = this.ephemeral_socket;\n  } else {\n    //\n    // Reuse our socket\n    //\n    socket = this.socket;\n  }\n\n  //\n  // Update the last time this socket was used\n  // This is used to make the socket ephemeral\n  //\n  this._update_last_used();\n\n  //\n  // Send the data\n  //\n  this.emit('data', buffer);\n  socket.send(buffer, 0, buffer.length, this.port, this.host, noop);\n};\n\n//\n// ### function close()\n//\n// var client = new lynx('localhost', 8125);\n// client.increment(\"zigzag\");\n// client.close();\n//\n// Closes our socket object after we are done with it\n//\nLynx.prototype.close = function close() {\n  //\n  // User defined socket\n  //\n  if (this.socket) {\n    this.socket.close();\n    this.socket = undefined;\n  }\n\n  //\n  // Ephemeral socket\n  //\n  if (this.ephemeral_socket) {\n    this.ephemeral_socket.close();\n    this.ephemeral_socket = undefined;\n  }\n\n  //\n  // Timer\n  //\n  if (this.last_used_timer) {\n    clearTimeout(this.last_used_timer);\n    this.last_used_timer = undefined;\n  }\n};\n\n\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ streams ~~\n//\n\n//\n// ### function write()\n//\n// Implements `Stream.prototype.write()`.\n//\nLynx.prototype.write = function write(buffer) {\n  this.parser.write(buffer);\n};\n\n//\n// ### function end()\n//\n// Implements `Stream.prototype.end()`.\n//\nLynx.prototype.end = function end(buffer) {\n  //\n  // If there's stuff to flush please do\n  //\n  if (arguments.length) {\n    this.write(buffer);\n  }\n\n  //\n  // Make this not writable\n  //\n  this.writable = false;\n};\n\n//\n// ### function destroy()\n//\n// Implements `Stream.prototype.destroy()`. Nothing to do here, we don't\n// open any stuff\n//\nLynx.prototype.destroy = function destroy() {\n  this.writable = false;\n};\n\n\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ aux ~~\n//\n\n//\n// ### function sample(stats, sample_rate)\n// #### @stats       {Object} A stats object\n// #### @sample_rate {Number} Determines the sampling rate, e.g. how many\n//      packets should be sent. If set to 0.1 it sends 1 in each 10.\n//\n// var lynx = require('lynx');\n// lynx.sample(\n//   { \"foo\" : \"1|c\"\n//   , \"bar\" : \"-1|c\"\n//   , \"baz\" : \"500|ms\"\n//   }, 0.5);\n//\n// Will sample this data for a given sample_rate. If a random generated\n// number matches that sample_rate then stats get returned and the sample\n// rate gets appended (\"|@0.5\" in this case). Else we get an empty object.\n//\nLynx.sample = function sample(stats, sample_rate) {\n  //\n  // If we don't have a sample rate between 0 and 1\n  //\n  if (typeof sample_rate !== 'number' || sample_rate > 1 || sample_rate < 0) {\n    //\n    // Had to ignore the invalid sample rate\n    // Most of the times this is because sample_rate is undefined\n    //\n    return stats;\n  }\n\n  var sampled_stats = {};\n\n  //\n  // Randomly determine if we should sample this specific instance\n  //\n  if (mt.genrand_real2(0,1) <= sample_rate) {\n    //\n    // Note: Current implementation either sends all stats for a specific\n    //       sample rate or sends none. Makes one wonder if granularity\n    //       should be at the individual stat level\n    //\n    Object.keys(stats).forEach(function construct_sampled(stat) {\n      var value = stats[stat];\n      sampled_stats[stat] = value + '|@' + sample_rate;\n    });\n  }\n\n  return sampled_stats;\n};\n\n//\n// ### function _update_last_used()\n//\n// An internal function update the last time the socket was\n// used.  This function is called when the socket is used\n// and causes demand allocated ephemeral sockets to be closed\n// after a period of inactivity.\n//\nLynx.prototype._update_last_used = function _update_last_used() {\n  var self = this;\n\n  //\n  // Only update on the ephemeral socket\n  //\n  if (this.ephemeral_socket) {\n    //\n    // Clear existing timeouts\n    //\n    if (this.last_used_timer) {\n      clearTimeout(this.last_used_timer);\n    }\n\n    //\n    // Update last_used_timer\n    //\n    this.last_used_timer = setTimeout(function() {\n      //\n      // If we have an open socket close it\n      //\n      if (self.ephemeral_socket) {\n        self.ephemeral_socket.close();\n      }\n\n      //\n      // Delete the socket\n      //\n      delete self.ephemeral_socket;\n    }, EPHEMERAL_LIFETIME_MS);\n  }\n};\n\n//\n// ### function default_error_handler()\n// #### @err  {Object} The error object. Includes:\n// err.message, err.*\n//\n// Function that defines what to do on error.\n// Errors are soft errors, and while interesting they are mostly informative\n// A simple console log would do but that doesn't allow people to do\n// custom stuff with errors\n//\nLynx.prototype._default_error_handler = function _default_error_handler(e) {\n  this.emit('error', e);\n};\n\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ exports ~~\n//\n\nmodule.exports = Lynx;\n"}